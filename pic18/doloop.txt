\ *********************************************************************
\                                                                     *
\    Filename:      doloop.txt                                        *
\    Date:          02.02.2014                                        *
\    File Version:  5.0                                               *
\    MCU:           PIC18                                             *
\    Copyright:     Mikael Nordman                                    *
\    Author:        Mikael Nordman                                    *
\ *********************************************************************
\    FlashForth is licensed acording to the GNU General Public License*
\ *********************************************************************
-doloop
marker -doloop

: compileonly $10 shb ; \ Set Header bit for compile only word

$f040 constant ind   \ Hardcoded index register address

: (do)  ( limit index --   R: -- leave oldindex xfactor ) 
  r>
  dup >a @ >r                \ leave
  ind @ >r                   \ oldindex
  swap $8000 swap - dup >r   \ xfactor on return stack
  + ind !
  a> 2+ >r                   \ return to after the leave pointer
; compileonly

: (?do)
  2dup xor
  if
    [ '  (do) ] again  \ branch to (do) 
  then
  r> @ >r 2drop
; compileonly

flash          \ append the hex codes to flash
: (loop)
  [ $0e00 , ]  \ movlw 0
  [ $2a40 , ]  \ incf, ind, F, A
  [ $2241 , ]  \ addwfc ind+1, F, A
; compileonly

flash          \ append the hex codes to flash
: (+loop)
  [ $cfed , ]  \ movff   Sminus, Tp
  [ $ffe1 , ]  \ 
  [ $50ed , ]  \ movf    Sminus, W, A
  [ $2640 , ]  \ addwf   ind, F, A
  [ $50e1 , ]  \ movf    Tp, W, A
  [ $2241 , ]  \ addwfc  ind+1, F, A
; compileonly

flash          \ append the hex codes to flash
: i ( -- i   R: xfactor -- xfactor ) 
  [ $cffd , ] \ movff   TOSL, Tp
  [ $ffe1 , ] \ 
  [ $cffe , ] \ movff   TOSH, PCLATH
  [ $fffa , ] \ 
  [ $0006 , ] \ pop
  [ $50fd , ] \ movf    TOSL, W, A
  [ $5c40 , ] \ subwf   indexl, W, A
  [ $6eec , ] \ movwf   plusS, A
  [ $50fe , ] \ movf    TOSH, W, A
  [ $5841 , ] \ subwfb  indexh, W, A
  [ $6eec , ] \ movwf   plusS, A
  [ $50e1 , ] \ movf    Tp, W, A
  [ $6ef9 , ] \ movwf   PCL, A
; compileonly
ram

: (unloop) ( R: leave oldindex xfactor -- )
  r>
  rdrop r> ind ! rdrop
  >r
; compileonly

: do
  postpone (do)
  postpone begin
  flash 2 allot ram
  postpone begin
; immediate compileonly

: ?do
  postpone (?do)
  postpone begin
  flash 2 allot ram
  postpone begin
; immediate compileonly

: leave
  rdrop rdrop r> ind ! 
; compileonly

: loop
  postpone (loop)
  $e4 until,          \ $e4=overflow
  postpone (unloop)
  flash here swap ! ram
; immediate compileonly

: unloop
  postpone (unloop)
; immediate compileonly

: +loop
  postpone (+loop)
  $e4 until,          \ $e4=overflow
  postpone (unloop)
  flash here swap ! ram
; immediate compileonly

: j ( -- j  R: j-xfactor i-leave j-index i-xfactor -- the same )  
  r> r> r> r> 
  over r@ - >a
  >r >r >r >r
  a>
; compileonly

